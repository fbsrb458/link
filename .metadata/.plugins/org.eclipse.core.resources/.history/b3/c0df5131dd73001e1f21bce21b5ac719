package com.myweb.www.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@Controller
public class BoardController {
	//폴더명 : board / mapping : board
	//mapping => /board/register
	//목적지 => /board/register
	
	//boardservice 연결 
	@Inject
	private BoardService bsv;
	
	
	
	@Inject
	private FileHandler fh;
	
	
	@GetMapping("/register")
	public String register() { 
		log.info("start >>");
		return "/board/register";
	}
	
	
	
//	위와 동일하다
//	void : 동일한 곳으로 보낸다.
//	@GetMapping("/register")
//	public void register() { }
//	
//	}

//	@PostMapping("/register")
//	public String register(BoardVO bvo) {
//		log.info(bvo.toString());
//		int isOk = bsv.register(bvo);
//		log.info(">>>> board register >> "+(isOk>0? "OK":"FAIL"));
//		return "index";
//	}
	
	
	
	@PostMapping("/register")
	public String register(BoardVO bvo, RedirectAttributes re,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		//log.info(bvo.toString());
		log.info(">>> bvo >> files >> "+ bvo + "  "+ files);
		List<FileVO> flist = new ArrayList<>();
		//file upload handler 생성
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		
		int isUp = bsv.register(new BoardDTO(bvo,flist));
	    re.addFlashAttribute("isUp", isUp);
		return "redirect:/board/list";
	}
	
	
	//paging 추가
	@GetMapping("/list")
	public String getList(Model model, PagingVO pagingVO) {
		log.info(">>> PagingVO >>"+ pagingVO);
		List<BoardVO> list = bsv.getList(pagingVO);
		model.addAttribute("list", bsv.getList(pagingVO));
		//페이징 처리
		//총 페이지 
		int totalCount = bsv.getTotalCount(pagingVO);
		PagingHandler ph = new PagingHandler(pagingVO, totalCount);
		model.addAttribute("ph", ph);
		return "/board/list";
	}		
	
//	
//	
//	@GetMapping("/list")
//	public void list(Model m, PagingVO pagingVO) {
//		log.info(">>> PagingVO >>"+ pagingVO);
//		m.addAttribute("list", bsv.getList(pagingVO));
//	}
	
	@GetMapping({"/detail","/modify"})
	public void  detail(Model model, @RequestParam("bno")long bno) {
		log.info(">>>> detail bno >> "+bno);
		//BoardVO bvo = bsv.getDetail(bno);
		BoardDTO bdao = bsv.getDetail2(bno);
		model.addAttribute("bvoDTO", bdao);
	}	
	
	
//	@PostMapping("/modify")
//	public String modify(BoardVO bvo) {
//		log.info(">>>> modify bvo >> "+bvo);
//		//re.addAttribute("bno",bvo.getBno()); //addAttribute: 계속남아있는데이터
//		//re.addFlashAttribute("isMod", isOk); //addFlashAttribute: 사용되고 사라지는 데이터
//		//return "redirect:/board/detail"; 
//		int isOk = bsv.modify(bvo);
//		log.info(">>>> board modify >> "+(isOk>0? "OK":"FAIL"));
//		return "redirect:/board/detail?bno="+bvo.getBno();
//	}
	

	@PostMapping("/modify")
	public String modify(BoardVO bvo, RedirectAttributes reAttr,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>>> modify bvo >> "+bvo);
		log.info(">>> modify files >> "+ files);
		List<FileVO> flist = null;
		if(files[0].getSize() > 0) {
			//0보다 크다면 값이 있다 file이 존재함
			//기존 파일은 이미 DB에 등록완료 삭제할 파일은 비동기로 어미
			//삭제 완료. 새로 추가할 파일만 추가
			//file이 존재함.
			
			flist = fh.uploadFiles(files); //fvo 구성 List 리턴
		}
		
		BoardDTO bdto = new BoardDTO(bvo, flist);
		
		
		//int isOk = bsv.modify(bvo);
		int isOk = bsv.modifyFile(bdto);
		log.info(">>>> board modify >> "+(isOk>0? "OK":"FAIL"));
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	
	
	@DeleteMapping(value="/file/{uuid}")
	public ResponseEntity<String> romoveFile(@PathVariable("uuid") String uuid){
		log.info(">>>> uuid / cvo >> "+uuid);
		int isOk = bsv.removeFile(uuid);
		return isOk > 0? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
}
	
	
	
	
	
	
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")int bno, RedirectAttributes reAttr) {
		log.info(">>>> remove bno >> "+bno);
		int isOk = bsv.remove(bno);
		reAttr.addFlashAttribute("isOk", isOk); //is Ok을 is OK란 이름으로 보내는것
		
		return "redirect:/board/list";
	}
	
	
	@DeleteMapping(value ="/file/{uuid}")
	public ResponseEntity<String> romoveFile(@PathVariable("uuid") String uuid){
		log.info(">>>>> uuid / cvo >> "+ uuid);
		int isOk = bsv.removeFile(uuid);
		return isOk > 0? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	
	
	
	
	
	
	
}
